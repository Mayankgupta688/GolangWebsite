@html.extend('layout',function(model){
	@html.block('body',function(model){
        <section class="column-inner">
            <figure class="image-box">
                <a><img src="/images/golang/golang.png" alt="Golang Tutorials" title="Golang Populality and Scope" /></a>
            </figure>
            <div class="lower-part">
                <div class="post-info">
                    <a>JANUARY 13, 2023</a> <span class="bullet">&bull;</span> <a>TechnoFunnel</a> <span class="bullet">&bull;</span> <a>BY MAYANK GUPTA</a>
                </div>
                <div class="post-title">
                    <h1>Working with Arrays in Golang (Go)</h1>
                </div>

                <div class="post-text"><br/>
                    <article>
                        <h2>How to use Arrays in Golang: </h2>
                        <p>Array is a fixed size collection of data elements of same type. It contains related set of Data. Arrays are declared as variables</p><br/>
                        <code>var arr [3]int</code>
                        <p>In the Above code we are declaring array of 3 Integers having a default value as 0, since default value of "int" in golang is 0. 
                        Given below is the memory representation for the array</p>     
                        <img src="/images/golang/implicitTyped.png" alt="Golang Tutorials" title="Golang Populality and Scope" /><br/> 
                    </article>

                    <article>
                        <h2>Declaring Array in Golang using Array Literal</h2>
                        <p>Another way to declare array in Golang is to use array literal. In the below code we have created a new array containing 
                        3 values. The value at index 0 is 10, value at index 1 is 20 and value at index 2 is 30. </p><br/>
                        <code>arr = [3]int{10, 20, 30}</code>
                        <p>We can access the value of an array using the index. As given in the above code, we can access the value 10 by using the following
                        code. "arr[0]" represents value at index 0 which is equal to 10.</p>     
                        <img src="/images/golang/implicitTyped.png" alt="Golang Tutorials" title="Golang Populality and Scope" /><br/> 
                    </article>

                    <article>
                        <h2>Getting the Length of Array</h2>
                        <p>We can simply get the length of array by using the "len" function. The code below specifies the simple code to extract the length of an array.</p>
                    </article><br/>

                    <article>
                        <h2>Arrays are Copied by Value</h2>
                        <p>Assignement of Array to another variable is a copy operation. In this case a copy operation is carried out and the values are pasted in second array. 
                        Array 2 is a copy of original array and do not points to the memory location of original array. They are not pointing to the same location. 
                        Updating the value of "copyData" will not impact the values of "originalData" Array</p>
                    </article><br/>

                    <article>
                        <h2>Array can be Equated to another array using "=="</h2>
                        <p>When 2 Arrays are equated to each other, following are the internal operations that are carried out.</p>
                        <ul>
                            <li>1. Length of 2 Arrays are first Compared</li>
                            <li>2. Data Types of Arrays are Compared</li>
                            <li>3. Each Value of Original Array is compared to second array.</li>
                        </ul><br/>
                    </article><br/>
                </div>
            </div>
        </section>
    })
})